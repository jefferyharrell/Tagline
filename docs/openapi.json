{
    "openapi": "3.1.0",
    "info": {
        "title": "Tagline Media Management API",
        "version": "1.0.0"
    },
    "paths": {
        "/v1/health": {
            "get": {
                "tags": [
                    "system"
                ],
                "summary": "Health Check",
                "description": "Health check endpoint.",
                "operationId": "health_check_v1_health_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/verify-email": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Verify Email",
                "description": "Check if an email is eligible for registration",
                "operationId": "verify_email_v1_auth_verify_email_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailVerifyRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailVerifyResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/authenticate": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate User",
                "description": "Authenticate a user with a Stytch token",
                "operationId": "authenticate_user_v1_auth_authenticate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StytchAuthRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/me": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "summary": "Get Current User Info",
                "description": "Get information about the current authenticated user",
                "operationId": "get_current_user_info_v1_auth_me_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/v1/auth/roles/assign": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Assign Role",
                "description": "Assign a role to a user",
                "operationId": "assign_role_v1_auth_roles_assign_post",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleAssign"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/roles/bulk-assign": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Bulk Assign Roles",
                "description": "Assign multiple roles to a user",
                "operationId": "bulk_assign_roles_v1_auth_roles_bulk_assign_post",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleBulkAssign"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/roles/{role_name}": {
            "delete": {
                "tags": [
                    "authentication"
                ],
                "summary": "Remove Role",
                "description": "Remove a role from a user",
                "operationId": "remove_role_v1_auth_roles__role_name__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "role_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Role Name"
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/roles": {
            "get": {
                "tags": [
                    "authentication"
                ],
                "summary": "Get All Roles",
                "description": "Get all available roles",
                "operationId": "get_all_roles_v1_auth_roles_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Role"
                                    },
                                    "type": "array",
                                    "title": "Response Get All Roles V1 Auth Roles Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/v1/auth/eligible-emails": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Add Eligible Email",
                "description": "Add an email to the eligible list",
                "operationId": "add_eligible_email_v1_auth_eligible_emails_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EligibleEmailCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EligibleEmail"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/v1/auth/eligible-emails/bulk": {
            "post": {
                "tags": [
                    "authentication"
                ],
                "summary": "Bulk Add Eligible Emails",
                "description": "Add multiple emails to the eligible list",
                "operationId": "bulk_add_eligible_emails_v1_auth_eligible_emails_bulk_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EligibleEmailBulkCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": true,
                                    "type": "object",
                                    "title": "Response Bulk Add Eligible Emails V1 Auth Eligible Emails Bulk Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/v1/media/{id}/data": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Get Media Data",
                "description": "Returns the raw bytes of a media object by UUID as a streamable response.\n\nReturns 404 if not found.",
                "operationId": "get_media_data_v1_media__id__data_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/media": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Get Media Objects List",
                "description": "Retrieves a paginated list of media objects stored in the database.",
                "operationId": "list_media_objects_v1_media_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 500,
                            "minimum": 1,
                            "description": "Number of items per page.",
                            "default": 100,
                            "title": "Limit"
                        },
                        "description": "Number of items per page."
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Pagination offset.",
                            "default": 0,
                            "title": "Offset"
                        },
                        "description": "Pagination offset."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMediaResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/media/{id}": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Get Media Object",
                "description": "Retrieve a single media object by its UUID.\nReturns 404 if not found.",
                "operationId": "get_media_object_v1_media__id__get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "media"
                ],
                "summary": "Patch Media Object",
                "description": "Partially update metadata for a media object by its UUID.\nMerges new fields into the existing metadata dict. Returns the updated object.",
                "operationId": "patch_media_object_v1_media__id__patch",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MediaObjectMetadata"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MediaObject"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/media/{id}/thumbnail": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Get Media Thumbnail",
                "description": "Returns the thumbnail bytes for a media object by UUID, or 404 if not found or no thumbnail exists.\nAlways returns as image/jpeg per API spec.",
                "operationId": "get_media_thumbnail_v1_media__id__thumbnail_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/media/{id}/proxy": {
            "get": {
                "tags": [
                    "media"
                ],
                "summary": "Get Media Proxy",
                "description": "Returns the proxy bytes for a media object by UUID, or 404 if not found or no proxy exists.\nReturns with the stored proxy mimetype, or application/octet-stream if missing.",
                "operationId": "get_media_proxy_v1_media__id__proxy_get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "title": "Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/tasks/ingest": {
            "post": {
                "tags": [
                    "tasks"
                ],
                "summary": "Trigger ingest orchestrator",
                "description": "Trigger the ingest orchestrator task. Checks idempotency via Redis lock. If already running, returns 409.\nOtherwise, enqueues the orchestrator and returns the job ID.",
                "operationId": "trigger_ingest_v1_tasks_ingest_post",
                "responses": {
                    "202": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/v1/tasks/ingest/status": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Get ingest orchestrator status",
                "description": "Get the status and progress of the current or last run ingest orchestrator task.",
                "operationId": "get_ingest_status_v1_tasks_ingest_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "AuthResponse": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type"
                    },
                    "user_roles": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "User Roles"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "token_type",
                    "user_roles"
                ],
                "title": "AuthResponse"
            },
            "EligibleEmail": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "batch_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Batch Id"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id",
                    "created_at",
                    "batch_id"
                ],
                "title": "EligibleEmail"
            },
            "EligibleEmailBulkCreate": {
                "properties": {
                    "emails": {
                        "items": {
                            "type": "string",
                            "format": "email"
                        },
                        "type": "array",
                        "title": "Emails"
                    },
                    "batch_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Batch Id"
                    }
                },
                "type": "object",
                "required": [
                    "emails"
                ],
                "title": "EligibleEmailBulkCreate"
            },
            "EligibleEmailCreate": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "batch_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Batch Id"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ],
                "title": "EligibleEmailCreate"
            },
            "EmailVerifyRequest": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ],
                "title": "EmailVerifyRequest"
            },
            "EmailVerifyResponse": {
                "properties": {
                    "eligible": {
                        "type": "boolean",
                        "title": "Eligible"
                    }
                },
                "type": "object",
                "required": [
                    "eligible"
                ],
                "title": "EmailVerifyResponse"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "MediaObject": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "title": "Id"
                    },
                    "object_key": {
                        "type": "string",
                        "title": "Object Key"
                    },
                    "last_modified": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Modified"
                    },
                    "metadata": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "object_key"
                ],
                "title": "MediaObject",
                "description": "Schema for MediaObject API representation."
            },
            "MediaObjectMetadata": {
                "properties": {
                    "description": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 1024
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description",
                        "description": "Short, human-readable description."
                    },
                    "keywords": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Keywords",
                        "description": "List of keywords (each max 64 chars)."
                    }
                },
                "type": "object",
                "title": "MediaObjectMetadata"
            },
            "PaginatedMediaResponse": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/MediaObject"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "title": "Total"
                    },
                    "limit": {
                        "type": "integer",
                        "title": "Limit"
                    },
                    "offset": {
                        "type": "integer",
                        "title": "Offset"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "total",
                    "limit",
                    "offset"
                ],
                "title": "PaginatedMediaResponse",
                "description": "Schema for paginated list of MediaObjects."
            },
            "Role": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id",
                    "description",
                    "created_at"
                ],
                "title": "Role"
            },
            "RoleAssign": {
                "properties": {
                    "role_name": {
                        "type": "string",
                        "title": "Role Name"
                    }
                },
                "type": "object",
                "required": [
                    "role_name"
                ],
                "title": "RoleAssign"
            },
            "RoleBulkAssign": {
                "properties": {
                    "role_names": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Role Names"
                    }
                },
                "type": "object",
                "required": [
                    "role_names"
                ],
                "title": "RoleBulkAssign"
            },
            "StytchAuthRequest": {
                "properties": {
                    "token": {
                        "type": "string",
                        "title": "Token"
                    },
                    "session_token": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Session Token"
                    }
                },
                "type": "object",
                "required": [
                    "token"
                ],
                "title": "StytchAuthRequest"
            },
            "User": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Is Active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        },
                        "type": "array",
                        "title": "Roles"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id",
                    "is_active",
                    "created_at",
                    "roles"
                ],
                "title": "User"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "OAuth2PasswordBearer": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "scopes": {},
                        "tokenUrl": "/v1/auth/token"
                    }
                }
            }
        }
    }
}
