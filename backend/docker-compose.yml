services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: tagline-postgres
    environment:
      POSTGRES_DB: tagline
      POSTGRES_USER: tagline
      POSTGRES_PASSWORD: tagline
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tagline -d tagline"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: tagline-redis
    command: redis-server --appendonly yes
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    container_name: tagline-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    # volumes:
    #   - minio_data:/data
    restart: unless-stopped
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console

  # Run migrations before other services start
  migrate:
    build: .
    container_name: tagline-migrate
    command: python -m alembic upgrade head
    env_file:
      - .env
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"  # Run once and exit

  backend:
    build: .
    container_name: tagline-backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_BUCKET_NAME=tagline-media
      - S3_REGION=us-east-1
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
      migrate:
        condition: service_completed_successfully

  ingest-orchestrator:
    build: .
    command: rq worker orchestrator
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_BUCKET_NAME=tagline-media
      - S3_REGION=us-east-1
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - .:/app
    # Only one replica ensures singleton orchestrator
    deploy:
      replicas: 1

  ingest-worker:
    build: .
    command: rq worker-pool ingest -n 8
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_BUCKET_NAME=tagline-media
      - S3_REGION=us-east-1
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - .:/app
    # Worker pool handles internal parallelism with -n parameter

# volumes:
#   minio_data:
