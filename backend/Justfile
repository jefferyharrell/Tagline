# Justfile for Tagline Backend
# Your one-stop CLI for all the commands you never want to memorize again.
# Usage: just <recipe>

# Show all available commands
default:
    just help

format:
    uv run isort .
    uv run black .

lint:
    uv run ruff check --fix .
    uv run pyright --project .

# Testing
unit-tests:
    uv run pytest -s -v tests/unit -rs

e2e-tests:
    uv run pytest -s -v tests/e2e -rs

test:
    just unit-tests
    just e2e-tests

coverage:
    uv run pytest tests/unit --cov=app --cov-report=term-missing

all:
    just format
    just lint
    just test
    just pre-commit

everything:
    just all

run:
    source .env && uv run uvicorn app.main:app --host 0.0.0.0 --port 8000

# Remove Python cache files, test artifacts, and __pycache__ dirs
clean:
    find . -type d -name "__pycache__" -exec rm -rf {} +
    rm -rf .pytest_cache .mypy_cache .coverage coverage.xml
    echo "Cleaned up Python and test artifacts."

# Stop everything, rebuild images, and start fresh
rebuild:
    just down
    docker compose build --no-cache
    just up
    echo "Rebuilt and started fresh containers."

# Pre-Commit
pre-commit:
    # Run the pre-commit hoook
    uv run pre-commit run --all-files

# Docker Compose
up:
    # Start all containers in the background
    docker compose up --wait --wait-timeout 60
    just migrate

down:
    # Stop all containers
    docker compose down

bounce:
    just down
    just up

restart:
    docker compose restart

build:
    # Build Docker images
    docker compose build

pip-install:
    # Install/sync Python dependencies inside the backend container
    docker compose exec backend pip install -r /code/requirements.txt

logs:
    # Tail backend logs
    docker compose logs -f backend

shell:
    # Open a bash shell in the backend container
    docker exec -it tagline-backend-dev /bin/bash

# Alembic migrations (inside Docker)
migrate:
    # Apply all migrations in the backend container
    docker exec -it tagline-backend uv run alembic upgrade head

makemigration MESSAGE="Describe your migration":
    # Create a new Alembic migration (autogenerate) in Docker
    docker exec -it tagline-backend uv run alembic revision --autogenerate -m "{{MESSAGE}}"

dbshell:
    # Open a Postgres shell in the Postgres container for integration/dev DB
    docker exec -it tagline-postgres psql -U tagline -d tagline

# Clean up
prune:
    # Remove stopped containers, unused networks, dangling images/volumes
    docker system prune -f

# Show help
help:
    @echo "\nJustfile: Tagline Backend Project Helper\n"
    @just --list
    @echo "\nRun 'just <command>' to execute a task."
    @echo "For details: see docs/alembic-workflow.md and README.md."
